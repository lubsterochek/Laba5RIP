package ru.itmo.yurchik.model;
import java.util.HashSet;

public class IdGen {
    private static int idCounter = 1;
    private static HashSet<Integer> usedIds = new HashSet<>();

    // üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    public static int generateId() {
        int newId = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1
        while (usedIds.contains(newId)) {
            newId++; // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π ID
        }
        usedIds.add(newId); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ
        return newId;
    }

    // üîπ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç ID (–µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É!)
    public static void registerId(int id) {
        if (usedIds.contains(id)) {
            throw new IllegalArgumentException("–û—à–∏–±–∫–∞: ID " + id + " —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!");
        }
        usedIds.add(id);
        idCounter = Math.max(idCounter, id + 1);
    }

    // üîπ –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç ID (—É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä–∞–∫–æ–Ω–∞)
    public static void releaseId(int id) {
        usedIds.remove(id);
    }
}
